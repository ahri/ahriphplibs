Abstract:

        TLO (Tiny, Loadable Objects) is aimed at creating the smallest usable
        ORM (Object Relational Model/Mapper) in order to facilitate easy and
        fast prototyping.

        An ORM maps a PHP class to a table, e.g.

                class Foo extends TLO
                {
                        public $one;
                }

        maps to:

                CREATE TABLE foo (id CHAR(40),
                                  one VARCHAR(25),
                                  PRIMARY KEY (id));

        This is all well and good, but why should you extend TLO? The answer is
        that as soon as you have a collection of objects that has relationships
        to other objects, as you might having implemented an ER diagram, you'll
        spend lots of time joining from one object to another via different
        relationships and it all gets boring.

        It gets boring, but it also gets complicated. Especially when you have
        composite keys and have to remember to specify them all in your "WHERE"
        clause.

        So it gets boring, it gets complicated, and there's stuff you have to
        remember. Guess what happens when you come back to your project after a
        few months, or a year, and make a quick fix. Yeah; it breaks.

        ORMs are made to simplify things. They remember the stuff so you don't
        have to. They make the complex joins work. They do the boring stuff.
        They also do the security stuff by escaping variables and so forth.
        Bonus!

        So why use TLO over ORMs? Simply because I think it does what it needs
        to do and then stays in the background waiting to be told what to do
        next without pushing too much onto you. I wrote TLO in PHP, so that the
        PHP code is the primary participant. The SQL is secondary and can, to
        some extent, be ignored if you like. Or you can tune it to your heart's
        content.

Requirements:

        PHP 5.3.0+
        http://github.com/ahri/ahriphplibs/raw/master/Exception.classes.php
        http://github.com/ahri/ahriphplibs/raw/master/TLO.classes.php

Example 1:

        I learn best through examples so I'm going to arrogantly assume that
        you don't want any more theory, and just want to get stuck in.

        Blogs. Everyone has a blog. Everyone reads blogs. There are thousands
        of Blog apps. Let's build yet another Blog. With attached links.

        First a basic ER diagram:

        +----+           +----+
        |Link|-Attached->|Blog|
        +----+           +----+

        And then the PHP:

                error_reporting(E_ALL | E_STRICT);

                class Blog extends TLO
                {
                        public $title;
                        public $content;
                }

                class Attached extends TLORelationship
                {
                        /*
                         * Which side of the relationship
                         * contains only one object
                         */
                        public static function relationOne()  { return 'Blog'; }

                        /*
                         * Which side of the relationship
                         * may contain many objects
                         */
                        public static function relationMany() { return 'Link'; }

                        /*
                         * You could read this as
                         * "There may be many Links per Blog"
                         */
                }

                class Link extends TLO
                {
                        public $url;
                }


        You use TLO to generate the SQL for this:

                printf("<pre>\n%s</pre>\n", TLO::sqlCreateAll());

        Producing:

                CREATE TABLE blog (id CHAR(40),
                                   title VARCHAR(25),
                                   content VARCHAR(25),
                                   PRIMARY KEY (id));

                CREATE TABLE link (id CHAR(40),
                                   url VARCHAR(25),
                                   attached__key__id CHAR(40);
                                   PRIMARY KEY (id));

        Obviously TLO has done a few things here; it's made a single guess
        about your schema; that all your variables will fit into a
        VARCHAR(25)... hah! How silly. So change them if you like. Just keep
        those CHAR(40)s because the IDs (which you'll notice you didn't mention
        in your PHP) are generated by TLO so it knows what type they should be.

        It's written like this to make sure that you can get up and running
        right away and work out the specifics later.

        Let's get that into a database:

                $db = new PDO('sqlite::memory:');
                $db->exec(TLO::sqlCreateAll());

        Now, as we're going to use TLO, let's initialise it. This just seeds
        a random number for ID generation.

                TLO::init();

        And now create some Blog entries:

                $blog1 = TLO::newObject($db, 'Blog');
                $blog1->title = "News sites";
                $blog1->content = "I like reading news websites, attached to
                                   this blog are some of my favourites";
                $blog1->write();

                foreach (array('http://news.bbc.co.uk',
                               'http://news.yahoo.com') as $url) {
                        /*
                         * Create the link
                         */
                        $link = TLO::newObject($db, 'Link');
                        $link->url = $url;
                        $link->write();


                        /*
                         * Now create a relationship between the blog
                         * and the link
                         */
                        $blog1->newRelMany('Attached', $link);
                }

                $blog2 = TLO::newObject($db, 'Blog');
                $blog2->title = "Social media";
                $blog2->content = "I recently discovered lots of 'social media'
                                   websites where people link lots of
                                   interesting articles. See attached for some
                                   examples of this.";
                $blog2->write();

                foreach (array('http://reddit.com',
                               'http://news.ycombinator.com/') as $url) {
                        /*
                         * Create the link
                         */
                        $link = TLO::newObject($db, 'Link');
                        $link->url = $url;
                        $link->write();

                        /*
                         * Now create a relationship between the blog
                         * and the link
                         */
                        $blog1->newRelMany('Attached', $link);
                }

        Great, so now we have entries with links, we want to output them:

                foreach (TLO::getObjects($db, 'Blog') as $blog) {
                        printf("Title: %s<br/>\n", $blog->title);
                        printf("Content: %s<br/>\n", $blog->content);
                        printf("<ol>Attachments:\n");
                        foreach ($blog->getRelsMany('Attached') as $attached) {
                                $link = $attached->getRelation();
                                printf("<li>%s</li>\n", $link->url);
                        }
                        printf("</ol>\n");
                }
                printf("<br/>\n\n");

        This outputs:

                Title: News sites<br/>
                Content: I like reading news websites, attached to
                                   this blog are some of my favourites<br/>
                <ol>Attachments:
                <li>http://news.bbc.co.uk</li>
                <li>http://news.yahoo.com</li>
                </ol>
                Title: Social media<br/>
                Content: I recently discovered lots of 'social media'
                                   websites where people link lots of
                                   interesting articles. See attached for some
                                   examples of this.<br/>
                <ol>Attachments:
                <li>http://reddit.com</li>
                <li>http://news.ycombinator.com/</li>
                </ol>
                <br/>

Example 2:

        TODO: named keys

Example 3:

        TODO: inheritance

Example 4:

        TODO: abstract classes

Example 4:

        TODO: mtm relationships
